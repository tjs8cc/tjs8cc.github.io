<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tyler Smith</title>
    <link>/post/</link>
    <description>Recent content in Posts on Tyler Smith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 -0500</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Measuring Measure for Measure</title>
      <link>/post/measuring-measure-for-measure/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/measuring-measure-for-measure/</guid>
      <description>Purpose This is a work in progress, but I’d like to post a summary and my thoughts on Shakespeare’s Measure for Measure and then use it to perform some basic Natural Language Processing (NLP)
Note: if I end up doing a sentiment analysis, the sentiment libraries I’m aware of would not really be appropriate for early modern English.
Overview  Word Frequencies Load Measure for Measure from the Gutenberg Project:</description>
    </item>
    
    <item>
      <title>Notes on The Elements of Statistical Learning</title>
      <link>/post/notes-on-the-elements-of-statistical-learning/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/notes-on-the-elements-of-statistical-learning/</guid>
      <description>Purpose The Bias-Variance Tradeoff Tree-based Methods   Purpose The Elements of Statistical Learning by Hastie et. al. is the best resource I’ve found for understanding modern statistical and machine learning techniques. These techniques aim to answer problems of the following kind: what’s the best approximation to the conditional expectation function \(f(x) = E[Y|X]\)? Or more generally, what is our best guess for \(Y\) given what we know about \(X\)?</description>
    </item>
    
    <item>
      <title>Predicting Blood Donations: Part 1</title>
      <link>/post/predicting-blood-donations-part-1/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/predicting-blood-donations-part-1/</guid>
      <description>Purpose This post shows some basic R usage, data exploration, and visualization methods. In a future post I’ll explore some quantitative methods.
Obtaining data in R R has a useful function called download.file, which I show here for future reference. Using method = curl, and maybe the extra option to pass additional arguments, I can download data from the DrivenData website
training_data_url &amp;lt;- &amp;quot;https://s3.amazonaws.com/drivendata/data/2/public/ 9db113a1-cdbe-4b1c-98c2-11590f124dd8.csv&amp;quot; train_file &amp;lt;- &amp;quot;../../data/training.csv&amp;quot; if(!file.exists(train_file)){ download.</description>
    </item>
    
  </channel>
</rss>